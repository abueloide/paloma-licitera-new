#!/bin/bash

# =================================================================
# PALOMA LICITERA - SCRIPT DE INSTALACI√ìN COMPLETO
# =================================================================
# Este script configura todo el entorno necesario para ejecutar
# la plataforma Paloma Licitera de forma confiable
# =================================================================

set -e  # Salir en caso de error

echo "üê¶ ===================================================="
echo "   PALOMA LICITERA - INSTALACI√ìN COMPLETA"
echo "===================================================="
echo ""

# ---------------------------------------------
# 1. VERIFICAR PREREQUISITOS
# ---------------------------------------------
echo "üìã PASO 1: Verificando prerequisitos..."
echo ""

# Verificar Python 3
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 no est√° instalado"
    echo "   Por favor instala Python 3.9 o superior"
    exit 1
fi

PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
echo "‚úÖ Python $PYTHON_VERSION encontrado"

# Verificar Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js no est√° instalado"
    echo "   Por favor instala Node.js 16 o superior"
    exit 1
fi

NODE_VERSION=$(node --version)
echo "‚úÖ Node.js $NODE_VERSION encontrado"

# Verificar npm
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm no est√° instalado"
    exit 1
fi

NPM_VERSION=$(npm --version)
echo "‚úÖ npm $NPM_VERSION encontrado"

# Verificar PostgreSQL
echo ""
echo "üîç Verificando PostgreSQL..."
if ! command -v psql &> /dev/null; then
    echo "‚ö†Ô∏è  PostgreSQL no est√° instalado o psql no est√° en PATH"
    echo "   La aplicaci√≥n requiere PostgreSQL para funcionar"
    echo "   ¬øContinuar de todos modos? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    PSQL_VERSION=$(psql --version | awk '{print $3}')
    echo "‚úÖ PostgreSQL $PSQL_VERSION encontrado"
fi

# ---------------------------------------------
# 2. CREAR ENTORNO VIRTUAL PYTHON
# ---------------------------------------------
echo ""
echo "üì¶ PASO 2: Configurando entorno Python..."
echo ""

# Verificar si ya existe un entorno virtual
if [ -d "venv" ]; then
    echo "üîÑ Entorno virtual existente encontrado"
    echo "   ¬øDeseas recrearlo? (y/N)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo "   Eliminando entorno anterior..."
        rm -rf venv
        echo "   Creando nuevo entorno virtual..."
        python3 -m venv venv
    fi
else
    echo "üìå Creando entorno virtual..."
    python3 -m venv venv
fi

# Activar entorno virtual
echo "üîå Activando entorno virtual..."
source venv/bin/activate

# Actualizar pip
echo "üìà Actualizando pip..."
pip install --upgrade pip > /dev/null 2>&1

# ---------------------------------------------
# 3. INSTALAR DEPENDENCIAS PYTHON
# ---------------------------------------------
echo ""
echo "üìö PASO 3: Instalando dependencias Python..."
echo ""

# Verificar si requirements.txt existe
if [ ! -f "requirements.txt" ]; then
    echo "‚ùå requirements.txt no encontrado"
    exit 1
fi

echo "üì¶ Instalando paquetes..."
pip install -r requirements.txt

# Verificar instalaci√≥n de paquetes cr√≠ticos
echo ""
echo "‚úîÔ∏è  Verificando paquetes cr√≠ticos..."
python3 -c "import uvicorn" && echo "   ‚úÖ uvicorn instalado" || echo "   ‚ùå uvicorn NO instalado"
python3 -c "import fastapi" && echo "   ‚úÖ fastapi instalado" || echo "   ‚ùå fastapi NO instalado"
python3 -c "import psycopg2" && echo "   ‚úÖ psycopg2 instalado" || echo "   ‚ùå psycopg2 NO instalado"
python3 -c "import pandas" && echo "   ‚úÖ pandas instalado" || echo "   ‚ùå pandas NO instalado"
python3 -c "import playwright" && echo "   ‚úÖ playwright instalado" || echo "   ‚ùå playwright NO instalado"

# Instalar navegadores de Playwright si es necesario
echo ""
echo "üåê Instalando navegadores para Playwright..."
playwright install chromium

# ---------------------------------------------
# 4. INSTALAR DEPENDENCIAS FRONTEND
# ---------------------------------------------
echo ""
echo "üé® PASO 4: Instalando dependencias Frontend..."
echo ""

cd frontend

# Limpiar node_modules si existe
if [ -d "node_modules" ]; then
    echo "üßπ Limpiando node_modules anterior..."
    rm -rf node_modules
fi

# Limpiar cach√© de npm
echo "üßπ Limpiando cach√© de npm..."
npm cache clean --force

# Instalar dependencias
echo "üì¶ Instalando paquetes npm..."
npm install

cd ..

# ---------------------------------------------
# 5. VERIFICAR CONFIGURACI√ìN
# ---------------------------------------------
echo ""
echo "‚öôÔ∏è  PASO 5: Verificando configuraci√≥n..."
echo ""

# Verificar config.yaml
if [ ! -f "config.yaml" ]; then
    if [ -f "config.example.yaml" ]; then
        echo "üìã Creando config.yaml desde ejemplo..."
        cp config.example.yaml config.yaml
        echo "   ‚ö†Ô∏è  Por favor edita config.yaml con tus credenciales de PostgreSQL"
    else
        echo "‚ùå No se encontr√≥ config.yaml ni config.example.yaml"
        exit 1
    fi
else
    echo "‚úÖ config.yaml encontrado"
fi

# ---------------------------------------------
# 6. VERIFICAR BASE DE DATOS
# ---------------------------------------------
echo ""
echo "üóÑÔ∏è  PASO 6: Verificando base de datos..."
echo ""

# Intentar conectar a PostgreSQL
if command -v psql &> /dev/null; then
    if psql -h localhost -U postgres -d paloma_licitera -c "SELECT 1" > /dev/null 2>&1; then
        echo "‚úÖ Conexi√≥n a PostgreSQL exitosa"
        
        # Contar registros
        RECORD_COUNT=$(psql -h localhost -U postgres -d paloma_licitera -tAc "SELECT COUNT(*) FROM licitaciones;" 2>/dev/null || echo "0")
        echo "üìä Base de datos contiene $RECORD_COUNT licitaciones"
    else
        echo "‚ö†Ô∏è  No se pudo conectar a PostgreSQL"
        echo "   Verifica que:"
        echo "   1. PostgreSQL est√° ejecut√°ndose"
        echo "   2. La base de datos 'paloma_licitera' existe"
        echo "   3. El usuario 'postgres' tiene permisos"
        echo ""
        echo "   Para crear la base de datos:"
        echo "   $ psql -U postgres -c \"CREATE DATABASE paloma_licitera;\""
    fi
else
    echo "‚ö†Ô∏è  PostgreSQL no disponible para verificaci√≥n"
fi

# ---------------------------------------------
# 7. CREAR DIRECTORIOS NECESARIOS
# ---------------------------------------------
echo ""
echo "üìÅ PASO 7: Creando directorios necesarios..."
echo ""

mkdir -p logs
mkdir -p data
echo "‚úÖ Directorios creados"

# ---------------------------------------------
# 8. CREAR SCRIPT DE INICIO MEJORADO
# ---------------------------------------------
echo ""
echo "üöÄ PASO 8: Actualizando scripts de inicio..."
echo ""

# Hacer ejecutables los scripts
chmod +x start_dashboard.sh
chmod +x stop_dashboard.sh
echo "‚úÖ Scripts marcados como ejecutables"

# ---------------------------------------------
# RESUMEN FINAL
# ---------------------------------------------
echo ""
echo "===================================================="
echo "‚úÖ INSTALACI√ìN COMPLETADA CON √âXITO"
echo "===================================================="
echo ""
echo "üìã Resumen de la instalaci√≥n:"
echo "   ‚Ä¢ Python $PYTHON_VERSION con entorno virtual"
echo "   ‚Ä¢ Node.js $NODE_VERSION con npm $NPM_VERSION"
echo "   ‚Ä¢ Dependencias Python instaladas"
echo "   ‚Ä¢ Dependencias Frontend instaladas"
echo "   ‚Ä¢ Configuraci√≥n verificada"
echo ""
echo "üöÄ Para iniciar la aplicaci√≥n:"
echo ""
echo "   ./start_dashboard.sh"
echo ""
echo "‚èπÔ∏è  Para detener la aplicaci√≥n:"
echo ""
echo "   ./stop_dashboard.sh"
echo ""
echo "üìù IMPORTANTE:"
echo "   ‚Ä¢ Aseg√∫rate de que PostgreSQL est√© ejecut√°ndose"
echo "   ‚Ä¢ Verifica las credenciales en config.yaml"
echo "   ‚Ä¢ Los logs se guardar√°n en logs/"
echo ""
echo "¬°Listo para usar! üéâ"
